#include<bits/stdc++.h>
using namespace std;

class Node {
public:
    int key;
    Node *left, *right;
};

Node* newNode(int item) {
    Node* temp = new Node();
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

Node* insert(Node* node, int key) {
    if (node == NULL) return newNode(key);
    if (key < node->key) node->left = insert(node->left, key);
    else if (key > node->key) node->right = insert(node->right, key);
    return node;
}

bool printPath(Node *root, int key, vector<int> &path) {
    if (root == NULL) return false;
    path.push_back(root->key);
    if (root->key == key) return true;
    if ((root->left && printPath(root->left, key, path)) || (root->right && printPath(root->right, key, path))) return true;
    path.pop_back();
    return false;
}

void printCommonPath(Node *root, int n1, int n2) {
    vector<int> path1, path2;
    if (!printPath(root, n1, path1) || !printPath(root, n2, path2)) return;
    int i;
    for (i = 0; i < path1.size() && i < path2.size(); i++) {
        if (path1[i] != path2[i]) break;
        cout << path1[i] << " ";
    }
    for (int j = i; j < path2.size(); j++) cout << path2[j] << " ";
    cout << "\n" << path2.size() - i + 1 << "\n";
}

int main() {
    Node *root = NULL;
    root = insert(root, 12);
    insert(root, 9);
    insert(root, 5);
    insert(root, 11);
    insert(root, 20);
    insert(root, 15);
    insert(root, 7);
    insert(root, 3);
    insert(root, 6);
    insert(root, 27);
    printCommonPath(root, 5, 11);
    printCommonPath(root, 3, 12);
    printCommonPath(root, 6, 11);
    printCommonPath(root, 7, 9);
    printCommonPath(root, 7, 11);
    printCommonPath(root, 3, 15);
    return 0;
}
